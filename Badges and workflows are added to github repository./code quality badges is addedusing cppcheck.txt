Code Quality in diff view ULTIMATE
Version history
Changes to files in merge requests can cause Code Quality to fall if merged. In these cases, the merge request’s diff view displays an indicator next to lines with new Code Quality violations. For example:

Code Quality MR diff report

Example configuration
This example shows how to run Code Quality on your code by using GitLab CI/CD and Docker. It requires GitLab 11.11 or later, and GitLab Runner 11.5 or later. If you are using GitLab 11.4 or earlier, you can view the deprecated job definitions in the documentation archive.

Using shared runners, the job should be configured For the Docker-in-Docker workflow.
Using private runners, there is an alternative configuration recommended for running Code Quality analysis more efficiently.
In either configuration, the runner must have enough disk space to handle generated Code Quality files. For example on the GitLab project the files are approximately 7 GB.

Once you set up GitLab Runner, include the Code Quality template in your CI configuration:

include:
  - template: Code-Quality.gitlab-ci.yml

The above example creates a code_quality job in your CI/CD pipeline which scans your source code for code quality issues. The report is saved as a Code Quality report artifact that you can later download and analyze.

It’s also possible to override the URL to the Code Quality image by setting the CODE_QUALITY_IMAGE CI/CD variable. This is particularly useful if you want to lock in a specific version of Code Quality, or use a fork of it:

include:
  - template: Code-Quality.gitlab-ci.yml

code_quality:
  variables:
    CODE_QUALITY_IMAGE: "registry.example.com/codequality-fork:latest"

In GitLab 13.4 and later, you can override the Code Quality environment variables:

variables:
  TIMEOUT_SECONDS: 1

include:
  - template: Code-Quality.gitlab-ci.yml

By default, report artifacts are not downloadable. If you need them downloadable on the job details page, you can add gl-code-quality-report.json to the artifact paths like so:

include:
  - template: Code-Quality.gitlab-ci.yml

code_quality:
  artifacts:
    paths: [gl-code-quality-report.json]

The included code_quality job is running in the test stage, so it needs to be included in your CI configuration, like so:

stages:
  - test

